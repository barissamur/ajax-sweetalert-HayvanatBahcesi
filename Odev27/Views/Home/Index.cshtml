@model HayvanViewModel

@{
    ViewData["Title"] = "Anasayfa";
}

<h1 class="text-warning">HAYVANAT BAHÇESİ <i class="fa-solid fa-paw"></i></h1>

@if (!ViewData.ModelState.IsValid)
{
    <div class="alert alert-danger">
        <div asp-validation-summary="All"></div>
    </div>
}

<div class="col-6">

    <form asp-action="Index" method="post" enctype="multipart/form-data">
        <div class="mb-2">
            <label asp-for="Ad"></label>
            <input asp-for="Ad" type="text" class="form-control" />
            <span asp-validation-for="Ad" class="text-danger"></span>
        </div>
        <div class="mb-2">
            <label asp-for="Resim"></label>
            <input asp-for="Resim" type="file" class="form-control" />
            <span asp-validation-for="Resim" class="text-danger"></span>
        </div>
        <button class="btn btn-info">Ekle</button>
    </form>
</div>

@* Listelemeyi burda ViewComponent ile yaptık *@
<vc:listele />

@section Scripts{
    <script>
        function sil(id) {
            let url = "@Url.Action("Sil", "Home")?id=" + id;
            let isimUrl = "@Url.Action("Ad", "Home")?id=" + id;

            let isim;

            fetch(isimUrl)
                .then(res => res.text())
                .then(text => {
                    isim = text;

                    Swal.fire({
                        title: '"'+ isim + '"' + ' adlı öğeyi silmek istediğinize emin misiniz?',
                        text: "Bu dosya silindikten sonra geri alınamaz!",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Evet, sil!',
                        cancelButtonText: 'Hayır!'
                    })
                        .then((result) => {
                            if (result.isConfirmed) {
                                window.location.href = url;
                            }
                        })
                })
        }


        function duzenle(id) {
            let isimUrl = "@Url.Action("Ad", "Home")?id=" + id;
            let url = "@Url.Action("YeniAd", "Home")/" + id;

            let strId = "#" + id;

            let isim;

            fetch(isimUrl)
                .then(res => res.text())
                .then(text => {
                    isim = text;

                    Swal.fire({
                        icon:'question',
                        title: '"' + isim + '"' + ' için yeni bir ad giriniz',
                        input: 'text',
                        inputAttributes: {
                            autocapitalize: 'off'
                        },
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        confirmButtonText: 'Güncelle',
                        cancelButtonText: 'İptal',
                        showLoaderOnConfirm: true,

                        //hata olursa false oluyor ve if ile yakalayıp yazdırıyoruz
                        inputValidator: (value) => {
                            if (!value) {
                                return 'Bu alan boş bırakılamaz!'
                            }
                        },

                        // textbox içindeki değeri confirm'den sonra 'girilenAd' değişkeni içerisinde atıyoruz
                        preConfirm: (girilenAd) => {
                            fetch(url + "/" + girilenAd)
                                .then(rsp => rsp.text())
                                .then(txt => {
                                    $(strId).text(txt)
                                });
                        }
                    })
                })
        }
    </script>
}